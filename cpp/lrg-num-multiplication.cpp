/*lrg-number-multiplication.cpp
 *Written by: Keefer Rourke
 *License: LGPLv3
 *
 *COPYRIGHT Keefer Rourke 2014-2015
 *
 *Description: This program will multiply two large numbers stored as digits
 *in vectors, similar to the way one would add numbers on paper
 *
 *Disclaimer: This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU Lesser General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU Lesser General Public License for more details.
 *
 *You should have received a copy of the GNU Lesser General Public License
 *along with this program.  If not, see <http://www.gnu.org/licenses/>.*/

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;
typedef vector <int> ivec;

ivec genRandNum();
ivec addInts(ivec a, ivec b);
ivec multInts(ivec a, ivec b);

//allows printing of vectors
ostream & operator << (ostream & stream, ivec vec)
{
    for (int i = vec.size()-1; i >= 0; i--)
        stream << vec[i];
    return stream;
}

int main()
{
    srand(time(0)); //initialises the random number generator
    
    //generate random number
    ivec randNum1; 
    ivec randNum2;
    randNum1 = genRandNum();
    randNum2 = genRandNum();
    
    cout << "Generated two random 4 digit long numbers." << endl;

    //print numbers
    cout << "The first number is: " << randNum1 << endl;
    cout << "The second number is: " << randNum2 << endl;
    
    //multiply numbers
    cout << "Multiplying the two numbers." << endl;
    ivec product = multInts(randNum1, randNum2);
    cout << "The product of the two numbers is:" << endl << product << endl;
    
    return 0;
}

ivec genRandNum()
{
    ivec randNum;

    for (int i = 0; i < 309; i++)
    {
        int temp = rand() % 10;
        randNum.push_back(temp);
    }

    return randNum;
}

//function to add large integers
ivec addInts(ivec a, ivec b)
{
    ivec sum;
    ivec large = a;
    ivec small = b;

    //determine which vector is longer
    if (a.size() < b.size())
    {
        large = b;
        small = a;         
    }
       
    int carry = 0; //set carry to zero

    for (int i = 0; i < small.size(); i++)
    {
        int temp = small[i] + large[i] + carry; 
        carry = temp / 10;
        temp = temp % 10;
        sum.push_back(temp);
    }
     
    for (int i = small.size(); i < large.size(); i++)
    {
        int temp = large[i] + carry;
        carry = temp / 10;
        temp = temp % 10;
        sum.push_back(temp);
    }
    if (carry)
        sum.push_back(carry);

    return sum;
}

//function for large number multiplication
ivec multInts(ivec a,ivec b)
{
    ivec product;
    ivec temp1;
    ivec temp2;
    ivec large = a;
    ivec small = b;
     
    //determine which vector is longer
    if (a.size() < b.size())
    {
        large = b;
        small = a;         
    }

    int carry = 0;

    for (int i = 0; i < small.size(); i++)
    {
        carry = 0;

        for (int j = 0; j < large.size(); j++)
        {
            int temp = (small[i] * large[j]) + carry;

            carry = 0;

            while (temp >= 10)
            {
                temp -= 10;
                carry++;
            }

            temp1.push_back(temp);
        }

        if (carry > 0)
            temp1.push_back(carry);
            
        if (i == 0)
            product = temp1; 
        else
        {            
            reverse (temp1.begin(), temp1.end());
            //zero shifting
            for (int j = 0; j < i; j++)
                temp1.push_back(0);

            reverse (temp1.begin(), temp1.end());

            reverse (temp2.begin(), temp2.end());
            temp2 = addInts(temp1, temp2);
            product = addInts(temp2, product);
        }
        
        //empty temp vectors
        temp1.erase(temp1.begin(), temp1.end());
        temp2.erase(temp2.begin(), temp2.end());
    }
      
    return product;
}

/* Test Cases with 309 digit numbers:
 * ----------------------------------
 * Generated two random 4 digit long numbers.
 * The first number is: 137227954103642127686553620481999014183156020354091191394939096273193710657414179888746263160315048094104333217114925390185536773299057810490306861520565665346222214520807153512196378031782409557470165361922660631605736165298538478422726101992475967875775786803360640321820558889990806778134370831940815055967
 * The second number is: 172369349525690673207854849571869192069183501515545109216861076711068466209675844577344569326352360223551463025522286503095208092554017714838034456130887509454642539398468346632534116715568001222971881071490740640903435756713108961868145898862736556992241512590169315583611595866455153782111985463075109453949
 * Multiplying the two numbers.
 * The product of the two numbers is:
 * 23653893185586127653986361228039446138045156448809222102641520352993714420314898378106735843128716926059349453401714699567898887822639257970716866519226225321719649679301166566211073582031103272328096757172792872355015101459630156315271835647933075491729865445385068662105037666148097772307041613450238778999662503816386304011241524635095927611407490389189262476778655573712258983240983726241663886961784754139410704817574318452167829829151511911985330467266711034202383168403226427122003322787811130724285850474760488876006649844656769124282007437492685573506439513756627637591447057872149665969582874460679244163683
 *  
 * NOTE: The above answer is verified by the GNU bc integer calculator.
 * bc output:
 *
 * bc 1.06.95
 * Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
 * This is free software with ABSOLUTELY NO WARRANTY.
 * For details type `warranty'. 
 * 396543172474073819910456708253872147158520114298724355634538851507732821660437235852989658435464291126901320018295121122084127317500366118072197198992576579068502405711478598620629680549054490747112397887708981914947244464161581231086789497786768088018168002825200737279100646006793093398762355156616924342021 * 224302221832038704405511171602372016149657211410996122857711036484737922680932355417412456354973759333143867772600384499116922420517838697395110678206129429071176801920226334124098670823879227575170277219713641663493444253049560105648697985615805806901435736534503168917879988790535479928083031303994897028824
 * 88945514638260090190049001965201502187274299951505459533264191377949\
 * 79703524776522166687259656660452354305622311748099819806971552139619\
 * 77604085137540870956272339398441069445515017186163076120030133835251\
 * 33645446831727978266238335377410948481410214902693582128932232691506\
 * 86163605499709822092394985189843471186362737844824883721439740010805\
 * 19861415151959148334623957059881509012780432186929489025955700759875\
 * 75482352923566195903806749279390197474340291338425520294321699298956\
 * 29304102592121935390216362671170530815807062722511271702437297528612\
 * 42200614701140853425325849972742066509937921197386372544947928940714\
 * 13304
 * 
 * ----------------------------------
 *
 *  Generated two random 4 digit long numbers.
 * The first number is: 460148230483262602445815615245110998875602164006441809035813599110305334604845242276202930236969406953084637307495417079125533233197814533071076743863247030011636218944207223396840521702616541815174776491525532760998415453461128608575599165087156173289932152013378323217683985287414786014951375410441470668667
 * The second number is: 264940690618524090991399251473130315886219230280868281688634080333965588892042968740395343272547826568563095422512503097070570913798337846369801931479630854509546156858734576044984968413405317830810304852016089425209898656772831455152680544412448804065494147428137192412177442281957133551937974258031553205931
 * Multiplying the two numbers.
 * The product of the two numbers is:
 * 121911989971127393324150949392436094640086886020879001440110211610626262174028136311950275779084755735854283158863355505067648131928498618464720110403277021637613883294818140174571989612401274297913193705666196632429957659141907409524924077958082059740602516264135145704864417213933058157409622970881868747515930091092053043815962971296941987089052262429955653979285668027153958464347461570232876133947343180922229050019116976875700116326667809319783482148738219919447864289141762669770143444243708048390195230170992262221341402803227959177153878609870990874572566567594135345434161230622933642666042545716946120263977
 *
 * NOTE: The above answer is verified by the GNU bc integer calculator.
 * bc output:
 *
 * bc 1.06.95
 * Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
 * This is free software with ABSOLUTELY NO WARRANTY.
 * For details type `warranty'. 
 * 460148230483262602445815615245110998875602164006441809035813599110305334604845242276202930236969406953084637307495417079125533233197814533071076743863247030011636218944207223396840521702616541815174776491525532760998415453461128608575599165087156173289932152013378323217683985287414786014951375410441470668667 * 264940690618524090991399251473130315886219230280868281688634080333965588892042968740395343272547826568563095422512503097070570913798337846369801931479630854509546156858734576044984968413405317830810304852016089425209898656772831455152680544412448804065494147428137192412177442281957133551937974258031553205931
 * 12191198997112739332415094939243609464008688602087900144011021161062\
 * 62621740281363119502757790847557358542831588633555050676481319284986\
 * 18464720110403277021637613883294818140174571989612401274297913193705\
 * 66619663242995765914190740952492407795808205974060251626413514570486\
 * 44172139330581574096229708818687475159300910920530438159629712969419\
 * 87089052262429955653979285668027153958464347461570232876133947343180\
 * 92222905001911697687570011632666780931978348214873821991944786428914\
 * 17626697701434442437080483901952301709922622213414028032279591771538\
 * 78609870990874572566567594135345434161230622933642666042545716946120\
 * 263977
 */
